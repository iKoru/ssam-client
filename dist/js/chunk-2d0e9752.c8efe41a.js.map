{"version":3,"sources":["webpack:///./src/views/Message.vue?c84c","webpack:///src/views/Message.vue","webpack:///./src/views/Message.vue?7a29","webpack:///./src/views/Message.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","row","justify-center","align-center","xs12","sm10","lg8","px-3","$vuetify","breakpoint","xsOnly","wrap","_v","class","customAction mt-4","noResult","totalChats","items","chats","id","hide-headers","rows-per-page-items","loading","total-items","pagination","on","update:pagination","$event","scopedSlots","_u","key","fn","props","click","getChat","item","color","chatType","title","otherNickName","size","src","picturePath","__webpack_require__","_s","substring","_e","getShortContents","lastContents","lastSendTimestamp","fromNow","small","stopPropagation","deleteChat","slot","noresult","getChatList","tag","full-screen","model","value","callback","$$v","isChatOpen","expression","participants","onMessageWasSent","sendMessage","loadPreviousMessages","loadNewMessages","loadingMessages","messageList","newMessagesCount","isOpen","close","closeChat","open","openChat","placeholder","showEmoji","has-user-list","showFile","colors","alwaysScrollToBottom","scrollToBottom","showLauncher","messageStyling","disabled","staticRenderFns","Messagevue_type_script_lang_js_","name","[object Object]","imageUrl","header","bg","text","launcher","sentMessage","receivedMessage","userInput","chatId","noPreviousMessage","computed","$emit","MainLayout","$store","dispatch","$route","query","some","x","find","$axios","get","params","headers","silent","then","response","data","catch","error","message","methods","page","map","_objectSpread","$moment","length","totalCount","console","log","trim","chat","format","post","contents","Array","isArray","reverse","concat","filter","sendTimestamp","author","isSender","type","meta","otherStatus","axios","push","confirm","delete","splice","findIndex","timestampBefore","$nextTick","undefined","timestampAfter","watch","deep","val","document","body","style","position","views_Messagevue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__"],"mappings":"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","file":"js/chunk-2d0e9752.c8efe41a.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-container',[_c('v-layout',{staticClass:\"d-block\",attrs:{\"row\":\"\",\"justify-center\":\"\",\"align-center\":\"\"}},[_c('v-flex',{staticClass:\"mx-auto\",attrs:{\"xs12\":\"\",\"sm10\":\"\",\"lg8\":\"\",\"px-3\":_vm.$vuetify.breakpoint.xsOnly}},[_c('v-layout',{attrs:{\"row\":\"\",\"wrap\":\"\"}},[_c('v-flex',{attrs:{\"xs12\":\"\"}},[_c('h3',{staticClass:\"headline\"},[_vm._v(\"채팅 목록\")])]),_c('v-flex',{attrs:{\"xs12\":\"\"}},[_c('v-data-table',{class:{'customAction mt-4':true, 'noResult':_vm.totalChats === 0},attrs:{\"xs12\":\"\",\"items\":_vm.chats,\"id\":\"chatTable\",\"hide-headers\":\"\",\"rows-per-page-items\":[15],\"loading\":_vm.loading,\"total-items\":_vm.totalChats,\"pagination\":_vm.pagination},on:{\"update:pagination\":function($event){_vm.pagination=$event}},scopedSlots:_vm._u([{key:\"items\",fn:function(props){return [_c('tr',{staticClass:\"cursor-pointer\",on:{\"click\":function($event){return _vm.getChat(props.item)}}},[_c('td',{staticClass:\"px-2\"},[_c('v-avatar',{attrs:{\"color\":props.item.chatType !== 'T'?null:'primary',\"title\":props.item.otherNickName + '님과의 대화',\"size\":\"32px\"}},[(props.item.chatType !== 'T')?_c('img',{attrs:{\"src\":props.item.picturePath || require('@/static/img/defaultUser.png')}}):_c('span',{staticClass:\"white--text subheading\"},[_vm._v(_vm._s(props.item.otherNickName === '(알 수 없음)'?'?':props.item.otherNickName.substring(0, 1)))])])],1),(_vm.$vuetify.breakpoint.smAndUp)?_c('td',{staticClass:\"text-xs-left px-1\",attrs:{\"title\":props.item.chatType === 'T'?'토픽 닉네임':'라운지 필명'}},[_vm._v(_vm._s(props.item.otherNickName))]):_vm._e(),_c('td',{staticClass:\"text-xs-left multi-row px-2\"},[_vm._v(_vm._s(_vm.getShortContents(props.item.lastContents)))]),_c('td',{staticClass:\"text-xs-right px-2\"},[_vm._v(_vm._s(props.item.lastSendTimestamp.fromNow()))]),_c('td',{staticClass:\"px-2\"},[_c('v-btn',{staticClass:\"short\",attrs:{\"small\":\"\",\"color\":\"error\"},on:{\"click\":function($event){$event.stopPropagation();return _vm.deleteChat(props.item)}}},[_vm._v(\"삭제\")])],1)])]}}])},[_c('template',{slot:\"no-data\"},[_vm._v(_vm._s(this.noresult))]),_c('template',{slot:\"actions-prepend\"},[_c('v-btn',{attrs:{\"color\":\"primary\",\"loading\":_vm.loading},on:{\"click\":_vm.getChatList}},[_vm._v(\"새로고침\")]),_c('v-spacer')],1)],2)],1)],1)],1),_c(_vm.$vuetify.breakpoint.xsOnly?'v-dialog':'div',{tag:\"component\",attrs:{\"full-screen\":\"\"},model:{value:(_vm.isChatOpen),callback:function ($$v) {_vm.isChatOpen=$$v},expression:\"isChatOpen\"}},[_c('beautiful-chat',{attrs:{\"participants\":_vm.participants,\"onMessageWasSent\":_vm.sendMessage,\"loadPreviousMessages\":_vm.loadPreviousMessages,\"loadNewMessages\":_vm.loadNewMessages,\"loading\":_vm.loadingMessages,\"messageList\":_vm.messageList,\"newMessagesCount\":_vm.newMessagesCount,\"isOpen\":_vm.isChatOpen,\"close\":_vm.closeChat,\"open\":_vm.openChat,\"placeholder\":\"대화 내용을 입력해주세요.\",\"showEmoji\":false,\"has-user-list\":false,\"showFile\":false,\"colors\":_vm.colors,\"alwaysScrollToBottom\":_vm.scrollToBottom,\"showLauncher\":false,\"messageStyling\":false,\"title\":_vm.title,\"disabled\":_vm.disabled}})],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"," <template>\n  <v-container>\n    <v-layout row justify-center align-center class=\"d-block\">\n      <v-flex xs12 sm10 lg8 class=\"mx-auto\" :px-3=\"$vuetify.breakpoint.xsOnly\">\n        <v-layout row wrap>\n          <v-flex xs12>\n            <h3 class=\"headline\">채팅 목록</h3>\n          </v-flex>\n          <v-flex xs12>\n            <v-data-table xs12 :items=\"chats\" id=\"chatTable\" hide-headers :rows-per-page-items=\"[15]\" :loading=\"loading\" :total-items=\"totalChats\" :pagination.sync=\"pagination\" :class=\"{'customAction mt-4':true, 'noResult':totalChats === 0}\">\n              <template slot=\"items\" slot-scope=\"props\">\n                <tr class=\"cursor-pointer\" @click=\"getChat(props.item)\">\n                  <td class=\"px-2\">\n                    <v-avatar :color=\"props.item.chatType !== 'T'?null:'primary'\" :title=\"props.item.otherNickName + '님과의 대화'\" size=\"32px\">\n                      <img v-if=\"props.item.chatType !== 'T'\" :src=\"props.item.picturePath || require('@/static/img/defaultUser.png')\">\n                      <span v-else class=\"white--text subheading\">{{props.item.otherNickName === '(알 수 없음)'?'?':props.item.otherNickName.substring(0, 1)}}</span>\n                    </v-avatar>\n                  </td>\n                  <td class=\"text-xs-left px-1\" v-if=\"$vuetify.breakpoint.smAndUp\" :title=\"props.item.chatType === 'T'?'토픽 닉네임':'라운지 필명'\">{{ props.item.otherNickName }}</td>\n                  <td class=\"text-xs-left multi-row px-2\">{{getShortContents(props.item.lastContents)}}</td>\n                  <td class=\"text-xs-right px-2\">{{props.item.lastSendTimestamp.fromNow()}}</td>\n                  <td class=\"px-2\">\n                    <v-btn class=\"short\" @click.stop=\"deleteChat(props.item)\" small color=\"error\">삭제</v-btn>\n                  </td>\n                </tr>\n              </template>\n              <template slot=\"no-data\">{{this.noresult}}</template>\n              <template slot=\"actions-prepend\">\n                <v-btn color=\"primary\" @click=\"getChatList\" :loading=\"loading\">새로고침</v-btn>\n                <v-spacer></v-spacer>\n              </template>\n            </v-data-table>\n          </v-flex>\n        </v-layout>\n      </v-flex>\n      <component :is=\"$vuetify.breakpoint.xsOnly?'v-dialog':'div'\" full-screen v-model=\"isChatOpen\">\n        <beautiful-chat :participants=\"participants\" :onMessageWasSent=\"sendMessage\" :loadPreviousMessages=\"loadPreviousMessages\" :loadNewMessages=\"loadNewMessages\" :loading=\"loadingMessages\" :messageList=\"messageList\" :newMessagesCount=\"newMessagesCount\" :isOpen=\"isChatOpen\" :close=\"closeChat\" :open=\"openChat\" placeholder=\"대화 내용을 입력해주세요.\" :showEmoji=\"false\" :has-user-list=\"false\" :showFile=\"false\" :colors=\"colors\" :alwaysScrollToBottom=\"scrollToBottom\" :showLauncher=\"false\" :messageStyling=\"false\" :title=\"title\" :disabled=\"disabled\"></beautiful-chat>\n      </component>\n    </v-layout>\n  </v-container>\n</template>\n<script>\nimport MainLayout from '../layouts/MainLayout';\n\nexport default {\n  name: 'Message',\n  data () {\n    return {\n      loading: true,\n      chats: [],\n      totalChats: 0,\n      pagination: {},\n      participants: [\n        {\n          id: 'other',\n          name: 'other',\n          imageUrl: ''\n        }\n      ],\n      messageList: [],\n      newMessagesCount: 0,\n      isChatOpen: false,\n      colors: {\n        header: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        launcher: {\n          bg: '#4e8cff'\n        },\n        messageList: {\n          bg: '#ffffff'\n        },\n        sentMessage: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        receivedMessage: {\n          bg: '#eaeaea',\n          text: '#222222'\n        },\n        userInput: {\n          bg: '#f4f7f9',\n          text: '#565867'\n        }\n      },\n      title: '',\n      disabled: false,\n      chatId: null,\n      noPreviousMessage: false,\n      scrollToBottom: true,\n      loadingMessages: false\n    };\n  },\n  computed: {\n    noresult () {\n      return this.loading ? '내 채팅 목록을 불러오고 있습니다. 잠시만 기다려주세요...' : '아직 개설된 채팅이 없습니다.';\n    }\n  },\n  created () {\n    this.$emit('update:layout', MainLayout);\n    this.$store.dispatch('setColumnType', 'HIDE_ALWAYS')\n    this.getChatList();\n  },\n  mounted () {\n    if (this.$route.query.chatId) {\n      if (this.chats.some(x => x.chatId === this.$route.query.chatId)) {\n        this.getChat(this.chats.find(x => x.chatId === this.$route.query.chatId))\n      } else {\n        this.$axios.get('/message/target', { params: { chatId: this.$route.query.chatId }, headers: { silent: true } })\n          .then(response => {\n            this.getChat(response.data);\n          })\n          .catch(error => {\n            this.$store.dispatch('showSnackbar', { text: `${error.response ? error.response.data.message : '채팅을 찾지 못했습니다.'}`, color: 'error' });\n          })\n      }\n    }\n  },\n  methods: {\n    getChatList () {\n      this.loading = true;\n      this.$axios\n        .get('/message/list', { params: { page: this.pagination.page }, headers: { silent: true } })\n        .then(response => {\n          this.chats = response.data.map(x => ({ ...x, lastSendTimestamp: this.$moment(x.lastSendTimestamp, 'YYYYMMDDHHmmss') }));\n          this.totalChats = response.data.length > 0 ? response.data[0].totalCount : 0;\n          this.loading = false;\n        })\n        .catch(error => {\n          console.log(error);\n          this.$store.dispatch('showSnackbar', { text: `${error.response ? error.response.data.message : '채팅 목록을 가져오지 못했습니다.'}`, color: 'error' });\n          this.loading = false;\n        });\n      this.closeChat();\n    },\n    sendMessage (message) {\n      (message => {\n        if (message.data.text.trim().length > 0) {\n          message.data.text = message.data.text.trim();\n          const chat = this.chats.find(x => x.chatId === this.chatId);\n          const lastSendTimestamp = this.$moment(chat.lastSendTimestamp).format('YMMDDHHmmss');\n          this.$axios\n            .post('/message', { chatId: this.chatId, contents: message.data.text, lastSendTimestamp }, { headers: { silent: true } })\n            .then(response => {\n              if (Array.isArray(response.data.messageList)) {\n                response.data.messageList.reverse();\n                this.messageList = this.messageList.concat(response.data.messageList.filter(x => x.sendTimestamp > lastSendTimestamp).map(x => ({ author: x.isSender ? 'me' : chat ? chat.otherNickName : '(알 수 없음)', type: 'text', data: { text: x.contents, meta: this.$moment(x.sendTimestamp, 'YYYYMMDDHHmmss').format('Y.M.D hh:mm:ss a') } })));\n                if (response.data.messageList.length > 0) {\n                  chat.lastSendTimestamp = this.$moment(response.data.messageList[response.data.messageList.length - 1].sendTimestamp, 'YYYYMMDDHHmmss');\n                  chat.lastContents = response.data.messageList[response.data.messageList.length - 1].contents;\n                }\n              }\n            })\n            .catch(error => {\n              console.log(error.response);\n              this.$store.dispatch('showSnackbar', { text: `${error.response ? error.response.data.message : '메시지를 보내지 못했습니다.'}`, color: 'error' });\n            });\n        }\n      })(message);\n    },\n    onMessageWasSent (message) {\n      // called when the user sends a message\n      this.messageList = [...this.messageList, message];\n    },\n    openChat () {\n      this.isChatOpen = true;\n      this.newMessagesCount = 0;\n    },\n    closeChat () {\n      this.isChatOpen = false;\n    },\n    getChat (item) {\n      this.disabled = item.otherStatus === 'DELETED';\n      this.axios\n        .get('/message', { params: { chatId: item.chatId } })\n        .then(response => {\n          this.messageList = response.data.map(x => ({ author: x.isSender ? 'me' : item.otherNickName, type: 'text', data: { text: x.contents, meta: this.$moment(x.sendTimestamp, 'YYYYMMDDHHmmss').format('Y.M.D hh:mm:ss a') } })); console.log(this.messageList, 'messageList');\n          this.messageList.reverse();\n          if (this.disabled) {\n            this.messageList.push({ type: 'system', data: { text: `${item.otherNickName} 님이 채팅을 나갔습니다.` } });\n          }\n          this.noPreviousMessage = this.messageList.length < 15;\n\n          this.participants = [\n            {\n              id: item.otherNickName,\n              name: item.otherNickName,\n              imageUrl: item.chatType === 'T' ? '' : item.picturePath || require('@/static/img/defaultUser.png')\n            }\n          ];\n          this.chatId = item.chatId;\n          this.isChatOpen = true;\n        })\n        .catch(error => {\n          console.log(error.response);\n          this.$store.dispatch('showSnackbar', { text: error.response ? error.response.data.message : '채팅을 불러오지 못했습니다.', color: 'error' });\n        });\n      this.title = item.otherNickName + '님과의 대화';\n    },\n    deleteChat (item) {\n      if (confirm('이 채팅을 삭제하면 대화 내용이 모두 사라집니다.\\n정말 삭제하시겠어요?')) {\n        this.closeChat();\n        this.$axios\n          .delete('/message/' + item.chatId)\n          .then(response => {\n            this.chats.splice(this.chats.findIndex(x => x.chatId === item.chatId), 1);\n            this.$store.dispatch('showSnackbar', { text: '채팅을 삭제하였습니다.', color: 'success' });\n          })\n          .catch(error => {\n            console.log(error.response);\n            this.$store.dispatch('showSnackbar', { text: error.response ? error.response.data.message || '채팅을 삭제하지 못했습니다.' : '채팅을 삭제하지 못했습니다.', color: 'error' });\n          });\n      }\n    },\n    loadPreviousMessages () {\n      (() => {\n        if (!this.noPreviousMessage) {\n          this.scrollToBottom = false;\n          this.loadingMessages = true;\n          this.axios\n            .get('/message', { params: { chatId: this.chatId, timestampBefore: this.messageList[0] ? this.$moment(this.messageList[0].data.meta, 'YYYY.M.D hh:mm:ss a').format('YMMDDHHmmss') : this.$moment().format('YMMDDHHmmss') }, headers: { silent: true } })\n            .then(response => {\n              if (Array.isArray(response.data)) {\n                if (response.data.length < 15) {\n                  this.noPreviousMessage = true;\n                }\n                response.data.reverse();\n                const chat = this.chats.find(x => x.chatId === this.chatId);\n                this.messageList = response.data.map(x => ({ author: x.isSender ? 'me' : chat.otherNickName, type: 'text', data: { text: x.contents, meta: this.$moment(x.sendTimestamp, 'YYYYMMDDHHmmss').format('Y.M.D hh:mm:ss a') } })).concat(this.messageList);\n                this.loadingMessages = false;\n                this.$nextTick(() => {\n                  this.scrollToBottom = true;\n                });\n              }\n            })\n            .catch(error => {\n              console.log(error.response);\n              this.scrollToBottom = true;\n              this.loadingMessages = false;\n              this.$store.dispatch('showSnackbar', { text: error.response ? error.response.data.message : '메시지를 불러오지 못했습니다.', color: 'error' });\n            });\n        }\n      })();\n    },\n    loadNewMessages () {\n      (() => {\n        this.loadingMessages = true;\n        const lastSendTimestamp = this.messageList.length > 0 ? this.$moment(this.messageList[this.messageList.length - 1].data.meta, 'YYYY.M.D hh:mm:ss a').format('YMMDDHHmmss') : undefined;\n        this.axios\n          .get('/message', { params: { chatId: this.chatId, timestampAfter: lastSendTimestamp }, headers: { silent: true } })\n          .then(response => {\n            const chat = this.chats.find(x => x.chatId === this.chatId);\n            response.data.reverse();\n            this.messageList = this.messageList.concat(response.data.filter(x => !lastSendTimestamp || x.sendTimestamp > lastSendTimestamp).map(x => ({ author: x.isSender ? 'me' : chat.otherNickName, type: 'text', data: { text: x.contents, meta: this.$moment(x.sendTimestamp, 'YYYYMMDDHHmmss').format('Y.M.D hh:mm:ss a') } })));\n            this.loadingMessages = false;\n          })\n          .catch(error => {\n            console.log(error.response);\n            this.loadingMessages = false;\n            this.$store.dispatch('showSnackbar', { text: error.response ? error.response.data.message : '메시지를 불러오지 못했습니다.', color: 'error' });\n          });\n      })();\n    },\n    getShortContents (contents) {\n      return contents && contents.length > 50 ? contents.substring(0, 50) + '...' : contents;\n    }\n  },\n  watch: {\n    pagination: {\n      handler () {\n        this.getChatList();\n      },\n      deep: true\n    },\n    isChatOpen (val) {\n      if (this.$vuetify.breakpoint.xsOnly) {\n        document.body.style.position = val ? 'fixed' : 'initial';\n      }\n    }\n  }\n};\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./Message.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!./Message.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Message.vue?vue&type=template&id=06fcca7b&\"\nimport script from \"./Message.vue?vue&type=script&lang=js&\"\nexport * from \"./Message.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}